// <auto-generated />
using System;
using System.Collections.Generic;
using DndCharacterSheetAPI.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DndCharacterSheetAPI.Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240712060524_character_changes")]
    partial class character_changes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Age")
                        .HasColumnType("text");

                    b.Property<int>("Agility")
                        .HasColumnType("integer");

                    b.Property<Guid>("CharacterClassId")
                        .HasColumnType("uuid");

                    b.Property<int>("Charisma")
                        .HasColumnType("integer");

                    b.Property<int>("Constitution")
                        .HasColumnType("integer");

                    b.Property<int>("Exp")
                        .HasColumnType("integer");

                    b.Property<string>("Eyes")
                        .HasColumnType("text");

                    b.Property<string>("Hair")
                        .HasColumnType("text");

                    b.Property<string>("Height")
                        .HasColumnType("text");

                    b.Property<int>("Intelligence")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Notes")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<Guid>("OriginId")
                        .HasColumnType("uuid");

                    b.Property<string>("OutlookText")
                        .HasColumnType("text");

                    b.Property<int>("ProficiencyBonus")
                        .HasColumnType("integer");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Skin")
                        .HasColumnType("text");

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Weight")
                        .HasColumnType("text");

                    b.Property<int>("Wisdom")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("OriginId");

                    b.HasIndex("RaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.CharacterSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsProficient")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SkillId");

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.CharacterClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArmorProficiency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HitDice")
                        .HasColumnType("integer");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int[]>("Rescues")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("ToolsProficiency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WeaponProficiency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CharacterClasses");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.CharacterClassSkillProficiency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CharacterClassId");

                    b.HasIndex("SkillId");

                    b.ToTable("ClassSkillsProfiencies");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.ClassLevelBonus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacterClassId")
                        .HasColumnType("uuid");

                    b.Property<int>("HitPointsBonus")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("SpecialAbilities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterClassId");

                    b.ToTable("ClassLevelBonuses");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.RaceUniqueSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceUniqueSkills");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AssociatedAttribute")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.Origin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EquipmentProficiency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Languages")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Origins");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.OriginSkillProficiency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OriginId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OriginId");

                    b.HasIndex("SkillId");

                    b.ToTable("OriginSkillProficiencies");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.OriginUniqueSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OriginId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OriginId");

                    b.ToTable("OriginUniqueSkills");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.RacialBonus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Attribute")
                        .HasColumnType("integer");

                    b.Property<int>("BonusValue")
                        .HasColumnType("integer");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("RacialBonuses");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.SavingThrow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AssociatedAttribute")
                        .HasColumnType("integer");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsProficient")
                        .HasColumnType("boolean");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("SavingThrows");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.Character", b =>
                {
                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.CharacterClass", "CharacterClass")
                        .WithMany()
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.Origin", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterClass");

                    b.Navigation("Origin");

                    b.Navigation("Race");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.CharacterSkill", b =>
                {
                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.Character", "Character")
                        .WithMany("Skills")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.CharacterClassSkillProficiency", b =>
                {
                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.CharacterClass", "CharacterClass")
                        .WithMany("ClassSkillProficiencies")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterClass");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.ClassLevelBonus", b =>
                {
                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.CharacterClass", "CharacterClass")
                        .WithMany("LevelBonuses")
                        .HasForeignKey("CharacterClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterClass");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.RaceUniqueSkill", b =>
                {
                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.Race", "Race")
                        .WithMany("RacicalSkills")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.OriginSkillProficiency", b =>
                {
                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.Origin", "Origin")
                        .WithMany("OriginSkillProficiencies")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Origin");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.OriginUniqueSkill", b =>
                {
                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.Origin", "Origin")
                        .WithMany("OriginUniqueSkills")
                        .HasForeignKey("OriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.RacialBonus", b =>
                {
                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.Race", "Race")
                        .WithMany("RacialBonuses")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.SavingThrow", b =>
                {
                    b.HasOne("DndCharacterSheetAPI.Domain.Entities.Character", "Character")
                        .WithMany("SavingThrows")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.Character", b =>
                {
                    b.Navigation("SavingThrows");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.DictionaryEntities.CharacterClass", b =>
                {
                    b.Navigation("ClassSkillProficiencies");

                    b.Navigation("LevelBonuses");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.Origin", b =>
                {
                    b.Navigation("OriginSkillProficiencies");

                    b.Navigation("OriginUniqueSkills");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.Race", b =>
                {
                    b.Navigation("RacialBonuses");

                    b.Navigation("RacicalSkills");
                });

            modelBuilder.Entity("DndCharacterSheetAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Characters");
                });
#pragma warning restore 612, 618
        }
    }
}
